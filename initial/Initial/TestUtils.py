import os
import shutil

from SymbolTable import simulate
from StaticError import *
from functools import reduce

TESTCASE_DIR = os.path.join(os.getcwd(), "testcase")
INPUT_DIR = os.path.join(TESTCASE_DIR, "input")
EXPECTED_DIR = os.path.join(TESTCASE_DIR, "expected")
SOLUTION_DIR = os.path.join(TESTCASE_DIR, "solution")


class TestUtils:
    """
    A utility class for testing purposes, providing methods to run tests, clean directories,
    write files, and check test results.

    Methods:
        run(input: Any) -> List[str]:
            Executes the provided input and returns the result as a list of strings.
            Handles `StaticError` exceptions by returning the exception message.

        clean() -> None:
            Cleans up the test case directory by removing and recreating necessary subdirectories.

        write(file_path: str, content: str) -> None:
            Writes the given content to a file at the specified file path.

        check(input: List[str], expected: List[str], num: int) -> bool:
            Compares the solution generated by running the input with the expected output.
            Writes the input, expected output, and solution to their respective files.
            Returns True if the solution matches the expected output, otherwise False.
    """

    @staticmethod
    def run(input):
        try:
            result = simulate(input)
        except StaticError as e:
            result = [str(e)]

        return list(filter(lambda x: x is not None, result))

    @staticmethod
    def clean():
        if os.path.exists(TESTCASE_DIR):
            shutil.rmtree(TESTCASE_DIR)

        os.mkdir(TESTCASE_DIR)
        os.mkdir(INPUT_DIR)
        os.mkdir(EXPECTED_DIR)
        os.mkdir(SOLUTION_DIR)

    @staticmethod
    def write(file_path, content):
        with open(file_path, "w") as file:
            file.write(content)

    @staticmethod
    def check(input, expected, num):
        input_path = os.path.join(INPUT_DIR, f"{str(num).zfill(3)}.txt")
        TestUtils.write(input_path, "\n".join(input))

        expected_path = os.path.join(EXPECTED_DIR, f"{str(num).zfill(3)}.txt")
        TestUtils.write(expected_path, "\n".join(expected))

        solution = TestUtils.run(input)
        solution_path = os.path.join(SOLUTION_DIR, f"{str(num).zfill(3)}.txt")
        TestUtils.write(solution_path, "\n".join(solution))

        return "\n".join(expected) == "\n".join(solution)
